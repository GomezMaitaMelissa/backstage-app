apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: example-nodejs-template
  title: Example Node.js Template
  description: An example template for the scaffolder that creates a simple Node.js service
spec:
  owner: user:guest
  type: service
  parameters:
    - title: Fill in some steps
      required:
        - name
        - creatorName
        - crewName
        - applicationName
        - applicationLetter
        - squad
        - creationDate
        - repositoryName
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
        creatorName:
          title: Creator Name
          type: string
          description: Name of the creator of the component
        crewName:
          title: Crew Name
          type: string
          description: Name of the crew associated with this component
        applicationName:
          title: Name of the application of the component
          type: string
          description: Application letter identifier
        applicationLetter:
          title: Application Letter
          type: string
          description: Application letter identifier
        squad:
          title: Squad
          type: string
          description: Squad associated with this component
        creationDate:
          title: Creation Date
          type: string
          format: date
          description: Creation date of the component
        repositoryName:
          title: Repository Name
          type: string
          description: Name of the repository

    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}